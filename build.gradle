plugins {
    id 'java'
    id 'eclipse'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0.1"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'rip.snake'
version = '1.0.0-BETA'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
}

dependencies {
    compileOnly "com.velocitypowered:velocity-api:3.2.0-SNAPSHOT"
    annotationProcessor "com.velocitypowered:velocity-api:3.2.0-SNAPSHOT"

    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

    implementation "dev.dejvokep:boosted-yaml:1.3"
    implementation "at.favre.lib:bcrypt:0.10.2"
}

// Output to build/libs/shadow.jar
shadowJar {
    archiveClassifier.set("")
    archiveBaseName.set("${project.name}")
    archiveVersion.set("${project.version}")
}

def targetJavaVersion = 11
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }

    // Allow UTF-8
    options.encoding = 'UTF-8'
}

tasks.register("processVelocityPluginJson") {
    doLast {
        def versionToReplace = project.version.toString()
        def velocityPluginJsonFile = file("build/classes/java/main/velocity-plugin.json")

        if (velocityPluginJsonFile.exists()) {
            def velocityPluginJsonContent = velocityPluginJsonFile.text.replaceAll(/\$\{VERSION\}/, versionToReplace)
            velocityPluginJsonFile.text = velocityPluginJsonContent
        }
    }
}

processResources {
    dependsOn tasks.processVelocityPluginJson
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': project.version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)
